/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == nullptr) {
            return l2;
        }
        else if(l2 == nullptr) {
            return l1;
        }
        else if(l2 -> next == nullptr) {
            if(l2 -> val < l1 -> val) {
                l2 -> next = l1;
                return l2;
            }
            while(l1 -> next == nullptr) {
                if(l2 -> val >= l1 -> val && l2 -> val <= l1 -> val) {
                    l2 -> next = l1 -> next;
                    l1 -> next = l2;
                    return l1;
                }
                if(l1 -> val > l2 -> val) {
                    l2 -> next = l1;
                    return l2;
                }
                else {
                    l1 -> next = l2;
                    return l1;
                }
            }
        }
        
        ListNode *head = l1;
        ListNode *temp2 = l2 -> next;
        if(l2 -> val < l1 -> val) {
            head = l2;
            l2 -> next = l1;
            l2 = temp2;
            temp2 = l2 -> next;
            l1 = head;
        }
        
        while(l2 != nullptr) {
            if(l1 -> next == nullptr && l1 -> val <= l2 -> val) {
                l1 -> next = l2;
                break;
            }
            if(l2 -> val >= l1 -> val && l2 -> val <= l1 -> next -> val) {
                l2 -> next = l1 -> next;
                l1 -> next = l2;
                l1 = l1 -> next;
                l2 = temp2;
                if(l2 != nullptr) {
                    temp2 = l2 -> next;
                }
            }
            else {
                l1 = l1 -> next;
            }
        }
        
        return head;
    }
};
