//My first solution
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int nSize = nums.size();
        if(nSize == 1) {
            return nums.at(0);
        }
        
        int currentNum = 0;
        int maxNum = nums.at(0);
        for(int i = 0; i < nSize; ++i) {
            currentNum = nums.at(i);
            for(int j = i + 1; j < nSize; ++j) {
                if(currentNum > maxNum) {
                    maxNum = currentNum;
                }
                currentNum += nums.at(j);
            }
            if(currentNum > maxNum) {
                maxNum = currentNum;
            }
        }
        if(nums.at(nSize - 1) > maxNum) {
            maxNum = nums.at(nSize - 1);
        }
        return maxNum;
    }
};

//Best solution given
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int nSize = nums.size();
        if(nSize == 1) {
            return nums.at(0);
        }
        
        int currentNum = nums.at(0);
        int maxNum = nums.at(0);
        for(int i = 1; i < nSize; ++i) { 
            currentNum = max(nums.at(i), currentNum + nums.at(i));
            maxNum = max(currentNum, maxNum);
        }
        return maxNum;
    }
};
