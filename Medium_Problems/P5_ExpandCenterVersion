class Solution {
public:
    string longestPalindrome(string s) {
        int longPal = 1;
        int startPos = 0;
        
        for(int i = 0; i < s.length(); ++i)
        {
            // 2 possible centers: element itself vs 2 elements (a vs aa)
            for(int j = 0; j < 2; ++j)
            {
                int temp1 = i;
                int temp2 = i + j;
                
                // So long as we match, expand until no match or max expansion
                while(temp1 >= 0 && temp2 < s.length() && s.at(temp1) == s.at(temp2))
                {
                    temp1--;
                    temp2++;
                }
                // Once that is no longer the case, reset to previous matching points
                temp1++;
                temp2--;
                
                // If the length is bigger, it is now the solution
                if(temp2 - temp1 + 1 > longPal)
                {
                    startPos = temp1;
                    longPal = temp2 - temp1 + 1;
                }
            }
        }
        
        return s.substr(startPos, longPal);
    }
};
